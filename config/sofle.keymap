#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    mouse_button: mouse_button {
        compatible = "zmk,behavior-tap-dance";
        label = "MOUSE_BUTTON";
        #binding-cells = <0>;
        bindings = <&lt 2 C_PLAY_PAUSE>, <&tog 2>;

        tapping-term-ms = <100>;
    };

    os_swap: os_swap {
        compatible = "zmk,behavior-tap-dance";
        label = "OS_SWAP";
        #binding-cells = <0>;
        bindings = <&kp ESC>, <&tog 1>;
    };

    combos {
        compatible = "zmk,combos";

        left_brace {
            bindings = <&kp LBKT>;
            key-positions = <22 23>;
            layers = <0 1>;
            timeout-ms = <18>;
        };

        right_brace {
            bindings = <&kp RBKT>;
            key-positions = <23 24>;
            layers = <0 1>;
            timeout-ms = <18>;
        };

        single_quote {
            bindings = <&kp SQT>;
            key-positions = <36 37>;
            layers = <0 1>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <10 11>;
            layers = <0 1>;
            timeout-ms = <25>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <9 10>;
            layers = <0 1>;
            timeout-ms = <25>;
        };

        next {
            bindings = <&kp C_NEXT>;
            key-positions = <57 56>;
            layers = <0 1>;
        };

        prev {
            bindings = <&kp C_PREV>;
            key-positions = <57 55>;
            layers = <0 1>;
        };

        lock {
            bindings = <&tog 6>;
            key-positions = <39 51>;
            layers = <0 1>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <11 10>;
            layers = <2>;
        };

        six {
            bindings = <&kp N6>;
            key-positions = <2 3>;
            timeout-ms = <18>;
            layers = <0 1>;
        };

        media_prev {
            bindings = <&kp C_PREV>;
            key-positions = <8 9>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&os_swap    &kp N1     &kp N2        &kp N3     &kp N4    &kp N5           &mmv MOVE_UP     &kp N6      &kp N7     &kp N8            &kp N9              &kp N0           &lt 2 DEL
&kp TAB     &kp Q      &kp W         &kp E      &kp R     &kp T            &mmv MOVE_DOWN   &kp Y       &kp U      &kp I             &kp O               &kp P            &kp BACKSPACE
&lt 4 DEL   &kp A      &kp S         &kp D      &kp F     &kp G            &mmv MOVE_LEFT   &kp H       &kp J      &kp K             &kp L               &kp SEMI         &kp ENTER
&kp LSHFT   &kp Z      &kp X         &kp C      &kp V     &kp B            &mmv MOVE_RIGHT  &kp N       &kp M      &kp COMMA         &kp DOT             &kp FSLH         &kp RSHIFT
&kp C_MUTE  &kp LCTRL  &kp LEFT_ALT  &kp SPACE  &kp LCMD  &mouse_button    &mkp LCLK        &lt 3 LEFT  &kp SPACE  &mt RIGHT_ALT UP  &mt RIGHT_GUI DOWN  &mt RCTRL RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "mac";
            label = "mac";
        };

        layer_1 {
            display-name = "win";
            bindings = <
&trans      &kp N1     &kp N2        &kp N3  &kp N4     &kp N5           &mmv MOVE_UP     &kp N6  &kp N7     &kp N8        &kp N9              &kp N0          &trans
&trans      &trans     &trans        &kp E   &kp R      &kp T            &mmv MOVE_DOWN   &kp Y   &kp U      &kp I         &kp O               &kp P           &kp BACKSPACE
&trans      &kp A      &kp S         &kp D   &kp F      &kp G            &mmv MOVE_LEFT   &kp H   &kp J      &kp K         &kp L               &kp SEMI        &kp ENTER
&trans      &kp Z      &kp X         &kp C   &kp V      &kp B            &mmv MOVE_RIGHT  &kp N   &kp M      &kp COMMA     &kp DOT             &kp FSLH        &kp RSHIFT
&kp C_MUTE  &kp LCTRL  &kp LEFT_ALT  &trans  &kp LCTRL  &mouse_button    &mkp LCLK        &trans  &kp SPACE  &mt RCTRL UP  &mt RIGHT_ALT DOWN  &mt RGUI RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "win";
        };

        layer_2 {
            bindings = <
&none   &none           &none           &none            &none           &none       &msc SCRL_UP     &none   &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &none
&none   &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &msc SCRL_UP    &none       &msc SCRL_DOWN   &none   &none             &none       &none         &none         &none
&tog 4  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &none       &msc SCRL_LEFT   &none   &none             &none       &none         &none         &none
&none   &msc SCRL_LEFT  &mkp MB3        &msc SCRL_RIGHT  &mkp MB4        &mkp MB5    &msc SCRL_RIGHT  &none   &none             &none       &none         &none         &none
&trans  &none           &none           &none            &none           &trans      &mkp RCLK        &trans  &none             &none       &none         &none
            >;

            display-name = "mouse";
            label = "mouse";
        };

        layer_3 {
            label = "symbol";
            display-name = "symbol";
            bindings = <
&kp GRAVE  &trans    &trans  &trans    &trans      &trans              &trans  &trans             &trans         &trans        &trans                &trans                 &kp BACKSLASH
&trans     &none     &none   &none     &none       &kp LEFT_BRACKET    &trans  &kp RIGHT_BRACKET  &kp MINUS      &kp EQUAL     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans     &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT         &trans  &kp CARET          &kp AMPERSAND  &kp ASTERISK  &kp SQT               &trans                 &trans
&trans     &none     &none   &none     &none       &none               &trans  &none              &none          &trans        &trans                &trans                 &trans
&trans     &trans    &trans  &trans    &trans      &trans              &trans  &trans             &trans         &trans        &trans                &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&trans      &kp F1      &kp F2    &kp F3           &kp F4     &kp F5     &trans  &kp F6           &kp F7           &kp F8           &kp F9           &kp F10        &trans
&trans      &kp HOME    &kp UP    &kp END          &kp PG_UP  &kp F11    &trans  &kp KP_ASTERISK  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE  &trans
&trans      &kp LEFT    &kp DOWN  &kp RIGHT        &kp PG_DN  &kp F12    &trans  &kp KP_PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS   &trans
&caps_word  &kp INSERT  &trans    &kp PAUSE_BREAK  &trans     &trans     &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT     &trans
&trans      &trans      &trans    &trans           &trans     &tog 4     &trans  &trans           &trans           &trans           &trans           &trans
            >;

            display-name = "arrow";
            label = "arrow";
        };

        layer_5 {
            bindings = <
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans          &bt BT_CLR    &trans        &trans        &trans        &trans          &trans  &rgb_ug RGB_EFR  &trans           &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI
&trans          &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans          &trans  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPI
&trans          &trans        &trans        &trans        &trans        &trans          &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans          &trans        &trans        &trans        &trans        &trans          &trans  &trans           &trans           &trans           &trans           &trans
            >;

            label = "admin";
        };

        layer_6 {
            bindings = <
&none   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&trans  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &trans
&none   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
            >;

            label = "lock";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        admin {
            if-layers = <3 2>;
            then-layer = <5>;
        };
    };
};
